#!/usr/bin/env python3
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –≤ PYTHONPATH
current_dir = Path(__file__).parent
sys.path.append(str(current_dir))

from src.shared.database import engine
from sqlalchemy import text

async def check_db():
    print("üîç Checking database connection and tables...")
    
    try:
        async with engine.connect() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            print("‚úÖ Connected to database successfully!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ public —Å—Ö–µ–º–µ
            result = await conn.execute(
                text("SELECT table_name FROM information_schema.tables WHERE table_schema = 'public'")
            )
            tables = result.scalars().all()
            print(f"üìã Tables in public schema: {tables}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å users - –ø—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
            if 'users' in tables:
                result = await conn.execute(text("SELECT COUNT(*) FROM public.users"))
                count = result.scalar()
                print(f"üë• Users table has {count} records")
            else:
                print("‚ùå Users table not found")
                
    except Exception as e:
        print(f"‚ùå Error: {e}")

if __name__ == "__main__":
    asyncio.run(check_db())
